org: adersonjunior85
app: serverless-challenge
service: serverless-challenge

frameworkVersion:

provider:
  name: aws
  runtime: python3.6  # nodejs12.x
  profile: serverless-challenge-profile
  region: us-east-1
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  extractMetadata:
    handler: handler.extractMetadata
    description:
    memorySize: 128
    timeout: 30
    events:
      - s3:
          bucket: my-serveless-challenge-bucket-tester # Escolha o nome do seu bucket que deve ser Ãºnico
          event: s3:ObjectCreated:*
          rules:
            - prefix: upload/
            - suffix: .jpg
  getMetadata:
    handler: handler.getMetadata
    description:
    memorySize: 128
    timeout: 30
    events:
      - http:
          path: images/{s3objectkey}
          method: get
          cors: true
  getImage:
    handler: handler.getImage
    description:
    memorySize: 128
    timeout: 30
  infoImages:
    handler: handler.infoImages
    description:
    memorySize: 128
    timeout: 30

resources:
  Resources:
    ImagesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: s3objectkey
            AttributeType: S
        KeySchema:
          -
            AttributeName: s3objectkey
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

plugins:
  - serverless-python-requirements